import pandas as pd
import numpy as np


def compute_time_features(dataframe: pd.DataFrame, list_time: list) -> pd.DataFrame:
    """
    This function compute seasoner information from timestamp. These informations
    are used to let know the model weither of seasonality informations is in time series.
    parameters
    ----------
    dataframe: pd.DataFrame
        dataframe constructed from dataset
    list_time: list
        list of time used to compute seasonal information

    return 
    ------
    dataframe: pd.DataFrame
        new dataframe with seasonal informations
    """
    dataframe.timestamp = dataframe.timestamp.apply(convert_timestamp)
    dataframe = dataframe.sort_values(by = 'timestamp').reset_index(drop=True)

    for time in list_time:
        if time == "dayOfWeek":
            dataframe['dayOfWeek'] = dataframe.timestamp.dt.month
        elif time == "month":
            dataframe['month'] = dataframe.timestamp.dt.dayofweek
        elif time == "hour":
            dataframe['hour'] = dataframe.timestamp.dt.hour
        elif time == "minute":
            dataframe['minute'] = dataframe.timestamp.dt.minute
        else:
            dataframe['second'] = dataframe.timestamp.dt.second

    return dataframe


def compute_contextuals_features(
        dataframe: pd.DataFrame, 
        operation: str, 
        list_feat: list, 
        list_period: list) -> pd.DataFrame:
    """
    This function will create contextuals features from time domaine features.
    new features will be generated by doing operations like : rolling, diff, etc.
    parameters
    ----------
    dataframe: pd.DataFrame
        dataframe constructed from dataset
    operation: str
        type of operation to use on feature
    list_feat: list
        list of features that we want to use to compute contextuals time domaine features
    period: list
        list of period which is used to compute new features
    
    return
    ------
    dataframe: pd.DataFrame
        new dataframe with contextuals time domaine features
    """

    dataframe = perform_op_on_features(
            dataframe=dataframe, 
            list_feat=list_feat, 
            operation=operation,
            list_period=list_period)
        
    return dataframe
    

def perform_op_on_features(dataframe: pd.DataFrame, list_feat: list, list_period: list, operation: str) -> pd. DataFrame:
    """
    This functioncompute operation on features by iterating over list of features.
    parameters
    ----------
    dataframe: pd.DataFrame
        dataframe from dataset
    list_feat: str
        list of features that we want to use
    operation: str
        operation performed on features : mean, std, etc.
    list_period: list
        list of periods which is used to compute new features

    return
    ------
    dataframe: pd.Dataframe
    """

    for period in list_period:
        if operation == "mean":
            for feat in list_feat:
                dataframe[feat+'_%s'%(period)] = dataframe[feat].rolling(window=period, min_periods=10).mean()
        elif operation == "std":
            for feat in list_feat:
                dataframe[feat+'_%s'%(period)] = dataframe[feat].rolling(window=period, min_periods=10).std()
        else:
            for feat in list_feat:
                dataframe[feat+'_%s'%(period)] = dataframe[feat].rolling(window=period, min_periods=10).sum()
    
    return dataframe


def convert_timestamp(timestamp):
    return pd.to_datetime(timestamp)